[
    [
        {
            "test_name": "boot_successful",
            "commands": [
                "dmesg | grep 'random: crng init done'"
            ],
            "expected_response": "random: crng init done",
            "timeout": 6,
            "if_failed": "Power on your Omega device"
        }
    ],
    [

        {
            "test_name": "check_eth_ip",
            "commands": [
                "export ETH_IP=$(ifconfig | grep -A1 eth0 | grep 'inet addr' | cut -d 't' -f2 | cut -d ':' -f2 | cut -d ' ' -f1)",
                "[[ $ETH_IP != '' ]] && export RESULT='IP found!'",
                "wait_and_reset_serial_buffers 0",
                "echo $RESULT && unset RESULT"
            ],
            "expected_response": "IP found!",
            "timeout": 5,
            "if_failed": "Check if the device connected to Omega supports can be DHCP server, otherwise change Omega network config to use static IP"
        }
    ],
    [
        {
            "test_name": "initialize_gpio",
            "commands": [
                "export GPIO_BASE=$(cat /sys/class/gpio/gpiochip*/base | sort -r | head -n1)",
                "echo $GPIO_BASE > /sys/class/gpio/export",
                "echo 'out' > /sys/class/gpio/gpio$GPIO_BASE/direction",
                "wait_and_reset_serial_buffers 0",
                "cat /sys/class/gpio/gpio$GPIO_BASE/direction"
            ],
            "expected_response": "out",
            "timeout": 5,
            "if_failed": "Check GPIO mapping with 'gpio-lookup' command (https://documentation.onioniot.com/hardware-interfaces/gpio)"
        },
        {
            "test_name": "set_gpio_low",
            "commands": [
                "echo 0 > /sys/class/gpio/gpio$GPIO_BASE/value",
                "wait_and_reset_serial_buffers 0",
                "cat /sys/class/gpio/gpio$GPIO_BASE/value"
            ],
            "expected_response": "0",
            "timeout": 5,
            "if_failed": ""
        },
        {
            "test_name": "set_gpio_high",
            "commands": [
                "echo 1 > /sys/class/gpio/gpio$GPIO_BASE/value",
                "wait_and_reset_serial_buffers 0",
                "cat /sys/class/gpio/gpio$GPIO_BASE/value"
            ],
            "expected_response": "1",
            "timeout": 5,
            "if_failed": ""
        },
        {
            "test_name": "close_gpio",
            "commands": [
                "echo $GPIO_BASE > /sys/class/gpio/unexport"
            ],
            "expected_response": "",
            "timeout": 5,
            "if_failed": ""
        }
    ],
    [
        {
            "test_name": "detect_i2c_devices",
            "commands": [
                "export I2C_ADDRESS=$(i2cdetect -y 0 | cut -d ':' -f2 | tail -n8 | grep -Eo '[0-9a-fA-F]+')",
                "[[ $I2C_ADDRESS != '' ]] && export RESULT='Success'",
                "wait_and_reset_serial_buffers 0",
                "echo $RESULT && unset RESULT"
            ],
            "expected_response": "Success",
            "timeout": 5,
            "if_failed": "Check if you connected something to the I2C bus. See https://docs.onion.io/omega2-docs/communicating-with-i2c-devices.html"
        }
    ],
    [
        {
            "test_name": "is_sd_card_pluged",
            "commands": [
                "block info | grep /dev/mmcblk0p >> dev/null && export RESULT='SD card found'",
                "wait_and_reset_serial_buffers 0",
                "echo $RESULT && unset RESULT"
            ],
            "expected_response": "SD card found",
            "timeout": 5,
            "if_failed": "Plug in your SD card"
        },
        {
            "test_name": "is_sd_card_mounted",
            "commands": [
                "mount | grep '/dev/mmcblk0p' >> /dev/null  && export RESULT='Mounted'",
                "wait_and_reset_serial_buffers 0",
                "echo $RESULT && unset RESULT"
            ],
            "expected_response": "Mounted",
            "timeout": 5,
            "if_failed": "Check if the kernel module is instaleed for your SD card filesystem via 'opkg list-installed'"
        }
    ],
    [
        {
            "test_name": "is_usb_pluged",
            "commands": [
                "block info | grep /dev/sd >> dev/null && export RESULT='USB found'",
                "wait_and_reset_serial_buffers 0",
                "echo $RESULT && unset RESULT"
            ],
            "expected_response": "USB found",
            "timeout": 2,
            "if_failed": "Plug in your USB device"
        },
        {
            "test_name": "is_usb_mounted",
            "commands": [
                "mount | grep '/dev/sd' >> /dev/null  && export RESULT='Mounted'",
                "wait_and_reset_serial_buffers 0",
                "echo $RESULT && unset RESULT"
            ],
            "expected_response": "Mounted",
            "timeout": 2,
            "if_failed": "Check if the kernel module is instaleed for your USB drive filesystem via 'opkg list-installed'"
        }
    ],
    [
        {
            "test_name": "wireless_setup",
            "commands": [
                "uci set wireless.client.disabled='0'",
                "uci set wireless.client.ssid='{WIFI_SSID}'",
                "uci set wireless.client.key='{WIFI_PASSWORD}'",
                "uci commit wireless",
                "service network restart"
            ],
            "expected_response": "apcli0: associated",
            "timeout": 30,
            "if_failed": "Check your WiFi credentials!"
        },
        {
            "test_name": "wireless_check_sta",
            "commands": [
                "wait_and_reset_serial_buffers 15",
                "export STA_IP=$(ifconfig | grep -A1 apcli0 | grep 'inet addr' | cut -d 't' -f2 | cut -d ':' -f2 | cut -d ' ' -f1)",
                "[[ $STA_IP != '' ]] && export RESULT='IP found!'",
                "wait_and_reset_serial_buffers 0",
                "echo $RESULT && unset RESULT"
            ],
            "expected_response": "IP found!",
            "timeout": 5,
            "if_failed": ""
        },
        {
            "test_name": "wireless_check_ap",
            "commands": [
                "export AP_IP=$(ifconfig | grep -A1 ra0 | grep 'inet addr' | cut -d 't' -f2 | cut -d ':' -f2 | cut -d ' ' -f1)",
                "[[ $AP_IP != '' ]] && export RESULT='IP found!'",
                "wait_and_reset_serial_buffers 0",
                "echo $RESULT && unset RESULT"
            ],
            "expected_response": "IP found!",
            "timeout": 5,
            "if_failed": ""
        }
    ]
]